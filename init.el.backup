; Emacs OSX init.el : Jared Smith

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tron)))
 '(custom-safe-themes (quote ("9f5ec672f6daef952d2da3222d28b809e6811e538f33a1f25996fcd31cc7506b" "058eeda70c6a8e702da4c7037c582f727887f5ab49a401247eac40aece97060d" default)))
 '(custom-theme-directory "~/.emacs.d/themes")
 '(custom-theme-load-path (quote (custom-theme-directory t)))
 '(display-battery-mode t)
 '(fringe-mode (quote (7 . 14)) nil (fringe))
 '(global-visual-line-mode t)
 '(inhibit-startup-screen t)
 '(org-export-backends (quote (ascii html icalendar latex md odt)))
 '(org-startup-truncated nil)
 '(safe-local-variable-values (quote ((eval ignore-errors "Write-contents-functions is a buffer-local alternative to before-save-hook" (add-hook (quote write-contents-functions) (lambda nil (delete-trailing-whitespace) nil)) (require (quote whitespace)) "Sometimes the mode needs to be toggled off and on." (whitespace-mode 0) (whitespace-mode 1)) (whitespace-line-column . 80) (whitespace-style face trailing lines-tail) (require-final-newline . t))))
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Source Code Pro" :foundry "nil" :slant normal :weight normal :height 141 :width normal)))))

; load-paths
(add-to-list 'load-path "~/.emacs.d/custom")

; Rust Lang
;; load Rust Auto CompleteR (racer)
(require 'racer)

;; load packages
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

;; package initialization
(package-initialize)

; Fuck tilde!
(setq make-backup-files nil)

; Shut the hell up bell
(setq ring-bell-function 'ignore)

; Transparent Background
 ;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
 (set-frame-parameter (selected-frame) 'alpha '(87 80))
 (add-to-list 'default-frame-alist '(alpha 87 80))

 (eval-when-compile (require 'cl))
 (defun toggle-transparency ()
   (interactive)
   (if (/=
        (cadr (frame-parameter nil 'alpha))
        100)
       (set-frame-parameter nil 'alpha '(100 100))
     (set-frame-parameter nil 'alpha '(87 80))))
 (global-set-key (kbd "C-c t") 'toggle-transparency)

 ;; Set transparency of emacs
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))

; Options not needed, but are used on other platforms
;
; Linux
; No white spaces to be highlighted
;;(require 'whitespace)
;;(global-whitespace-mode 0)
;
; Window size
;(setq default-frame-alist '(
;		(width . 105)
;		(height . 56) ))
;
;; F11 = Full Screen
;(defun toggle-fullscreen (&optional f)
;  (interactive)
;  (let ((current-value (frame-parameter nil 'fullscreen)))
;    (set-frame-parameter nil 'fullscreen
;      (if (equal 'fullboth current-value)
;        (if (boundp 'old-fullscreen) old-fullscreen nil)
;        (progn (setq old-fullscreen current-value)
;          'fullboth)))))
;(global-set-key [f11] 'toggle-fullscreen)

;; Disable tool-bar
;;(tool-bar-mode -1)
